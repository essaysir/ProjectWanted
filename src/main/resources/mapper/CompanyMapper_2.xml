<?xml version="1.0" encoding="UTF-8"?>
<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<!--  mapper 의 namespace(네임스페이스)가 중복되면, 작동하지 않는다. -->
<mapper namespace="com.spring.wanted.ProjectWanted.company.mapper.InterCompanyMapper_2">
	
	<!-- job_select에필요한 값 가져오기	 -->
	<resultMap type="HashMap" id="getJobList_Map">
		<result property="job_code" 	column="job_code" javaType="String" />
		<result property="job_name" 	column="job_name" javaType="String" />
	</resultMap>
	<select id="getJobList" resultMap="getJobList_Map">
		select job_code, job_name 
		from tbl_job
	</select>
	
	<!-- job_select에 따라 해당되는 duty_select 가져오기 -->
	<resultMap type="HashMap" id="getDutyList_Map">
		<result property="duty_code" 	column="duty_code" javaType="String" />
		<result property="duty_name" 	column="duty_name" javaType="String" />
	</resultMap>
	<select id="getDutyList" parameterType="String" resultMap="getDutyList_Map">
		select duty_code, duty_name
		from tbl_duty
		where fk_job_code = ${jobCode}
	</select>
	
	<!-- TBL_POST에 등록하기 -->
	<insert id="insertRecruit" parameterType="com.spring.wanted.ProjectWanted.post.model.PostVO" useGeneratedKeys="true" keyColumn="post_code" keyProperty="post_code">
		<if test='image == null'>
		insert into tbl_post(POST_CODE, FK_COMPANY_ID, FK_DUTY_CODE, CAREER, SUBJECT, INFO, CREATEDAY, SALARY, MAINDUTY, QUALITY, DEADLINE, VIEWCOUNT, PAY_STATUS) 
		values(SEQ_POST.nextval, #{fk_company_id}, #{fk_duty_code}, #{career}, #{subject}, #{info}, #{createday}, #{salary}, #{mainduty}, #{quality}, #{deadline}, default, 0)
		</if>
		<if test='image != null'>
			insert into tbl_post(POST_CODE, FK_COMPANY_ID, FK_DUTY_CODE, CAREER, SUBJECT, INFO, IMAGE, CREATEDAY, SALARY, MAINDUTY, QUALITY, DEADLINE, VIEWCOUNT, PAY_STATUS) 
		values(SEQ_POST.nextval, #{fk_company_id}, #{fk_duty_code}, #{career}, #{subject}, #{info}, #{image}, #{createday}, #{salary}, #{mainduty}, #{quality}, #{deadline}, default, 0)
		</if>
	</insert>
	
	<insert id="insertTech" parameterType="HashMap">
		insert into tbl_post_tech(post_tech_code, fk_post_code, fk_tech_code)
		values(seq_post_tech.nextval, #{post_code}, #{fk_tech_code})
	</insert>
	
	<select id="getTotalPost" parameterType="String" resultType="int">
		select count(*)
		from tbl_post
		where fk_company_id = #{company_id}
	</select>
	<!-- //ajax로 Post호출하기 -->
	<resultMap type="HashMap" id="getPost_Map">
		<result property="post_code" 	column="post_code" 	javaType="String" />
		<result property="subject" 		column="subject" 	javaType="String" />
		<result property="createday" 	column="createday" 	javaType="String" />
		<result property="deadline" 	column="deadline" 	javaType="String" />
		<result property="pay_status" 	column="pay_status" javaType="String" />
		<result property="dateDiff" 	column="dateDiff" 	javaType="String" />
		<result property="createDiff" 	column="createDiff" javaType="String" />
		<result property="job_name" 	column="job_name" 	javaType="String" />
	</resultMap>
	<select id="getPost" parameterType="String" resultMap="getPost_Map">
		select post_code, subject, createday, deadline, pay_status, DateDiff, createDiff, job_name
		from
		(
		    select row_number() over(order by post_code desc) AS RNO, post_code, subject, to_char(createday,'yy/mm/dd') AS createday, to_char(deadline,'yy/mm/dd') AS deadline, pay_status
		            ,TRUNC(TO_DATE(deadline, 'YY/MM/DD')-TRUNC(SYSDATE)) AS DateDiff
		            ,TRUNC(TO_DATE(createday, 'YY/MM/DD') - TRUNC(SYSDATE)) AS createDiff, job_name
		    from tbl_post P
		    JOIN tbl_duty D
		    on p.fk_duty_code = D.duty_code
		    JOIN tbl_job J
		    on D.fk_job_code = J.job_code
		    where fk_company_id = #{fk_company_id}
		) V
		where RNO between #{start} and #{end}
	</select>
	
	<!-- ajax로 수정페이지 띄우기 -->
	<!-- ajax로 결제 상세페이지 띄우기 -->
	<resultMap type="HashMap" id="getEditRecruit_Map">
		<result property="post_code" 	column="post_code" 	javaType="String" />
		<result property="job_code" 	column="job_code" 	javaType="String" />
		<result property="job_name" 	column="job_name" 	javaType="String" />
		<result property="duty_code" 	column="duty_code" 	javaType="String" />
		<result property="duty_name" 	column="duty_name" 	javaType="String" />
		<result property="subject" 		column="subject" 	javaType="String" />
		<result property="career" 		column="career" 	javaType="String" />
		<result property="info" 		column="info" 		javaType="String" />
		<result property="mainduty" 	column="mainduty" 	javaType="String" />
		<result property="quality" 		column="quality" 	javaType="String" />
		<result property="salary" 		column="salary" 	javaType="String" />
		<result property="createday" 	column="createday" 	javaType="String" />
		<result property="deadline" 	column="deadline" 	javaType="String" />
	</resultMap>
	<select id="getEditRecruit" resultMap="getEditRecruit_Map">
		select post_code, job_code, job_name, duty_code, duty_name, subject, career, info, mainduty, quality, salary, createday, deadline
		from tbl_post P
		JOIN tbl_duty D
		on p.fk_duty_code = D.duty_code
		JOIN tbl_job J
		on D.fk_job_code = J.job_code
		where post_code = #{post_code}	
	</select>
	
	<!-- 수정페이지 에서 수정한거 update -->
	<update id="updateRecruit" parameterType="com.spring.wanted.ProjectWanted.post.model.PostVO">
		update TBL_post set subject = #{subject}, info = #{info}, mainduty = #{mainduty}
						  , quality = #{quality}, salary = #{salary}, createday = #{createday}
						  , deadline = #{deadline}, career = #{career}
		where post_code = #{post_code}
	</update>
	
	<!-- 공고페이지 에서 원하는공고 삭제하기 -->
	<delete id="deleteRecruit">
		delete from tbl_post
		where post_code = #{post_code}
	</delete>
	
	<!-- 공고페이지 에서 원하는공고 중단하기 -->
	<update id="stopRecruit">
		update tbl_post set deadline = TRUNC(sysdate) - 1
		where post_code = #{post_code}
	</update>
	
	<!-- 공고페이지 에서 원하는공고 결제상태 update하기 -->
	<update id="updatePostPayment">
		update tbl_post set pay_status = 1
		where post_code = #{post_code}
	</update>
	
	<!-- 공고페이지 에서 원하는공고 연장페이지 띄우기 -->
	<resultMap type="HashMap" id="viewExtendPost_Map">
		<result property="post_code" 		column="post_code" 		javaType="String" />
		<result property="job_code" 		column="job_code" 		javaType="String" />
		<result property="job_name" 		column="job_name" 		javaType="String" />
		<result property="duty_code" 		column="duty_code" 		javaType="String" />
		<result property="duty_name" 		column="duty_name" 		javaType="String" />
		<result property="subject" 			column="subject" 		javaType="String" />
		<result property="career" 			column="career" 		javaType="String" />
		<result property="info" 			column="info" 			javaType="String" />
		<result property="mainduty" 		column="mainduty" 		javaType="String" />
		<result property="quality" 			column="quality" 		javaType="String" />
		<result property="salary" 			column="salary" 		javaType="String" />
		<result property="createday" 		column="createday" 		javaType="String" />
		<result property="deadline" 		column="deadline" 		javaType="String" />
		<result property="updateDeadline" 	column="updateDeadline" javaType="String" />
	</resultMap>
	<select id="viewExtendPost" resultMap="viewExtendPost_Map">
		select post_code, job_code, job_name, duty_code, duty_name, subject, career, info, mainduty, quality, salary, createday, deadline
			  ,TRUNC(TO_DATE(deadline, 'YY/MM/DD'))+30 AS updateDeadline	
		from tbl_post P
		JOIN tbl_duty D
		on p.fk_duty_code = D.duty_code
		JOIN tbl_job J
		on D.fk_job_code = J.job_code
		where post_code = #{post_code}	
	</select>
	
	<!--기간연장하기 update하기 -->
	<update id="updateExtendPost">
		update tbl_post set deadline = TRUNC(deadline) + 30
		where post_code = #{post_code}
	</update>
	
	<!-- 원하는공고정보 가져오기 -->
	<select id="getOneRecruit" parameterType="String" resultType="com.spring.wanted.ProjectWanted.post.model.PostVO">
		select post_code, job_code, job_name, duty_code, duty_name, subject, career, info, mainduty, quality, image, salary, createday, deadline
		from tbl_post P
		JOIN tbl_duty D
		on p.fk_duty_code = D.duty_code
		JOIN tbl_job J
		on D.fk_job_code = J.job_code
		where post_code = #{post_code}	
	</select>
	
	<!-- ////////////////////////////////////////////////////////////////// -->
	
	<resultMap type="HashMap" id="getCompanyInfo_Map">
		<result property="company_id" 	column="company_id" 	javaType="String" />
		<result property="pwd" 			column="pwd" 			javaType="String" />
		<result property="name" 		column="name" 			javaType="String" />
		<result property="details" 		column="details" 		javaType="String" />
		<result property="serial_no" 	column="serial_no"		javaType="String" />
		<result property="image" 		column="image"			javaType="String" />
	</resultMap>
	<select id="getCompanyInfo" resultMap="getCompanyInfo_Map">
		select company_id, pwd, name, details, serial_no, image
		from tbl_company
		where company_id = #{company_id}		
	</select>
	
	<update id="nameUpdate" parameterType="HashMap">
		update tbl_company set name = #{name}
		where company_id = #{company_id}
	</update>
	
	<update id="nickUpdate" parameterType="HashMap">
		update tbl_company set details = #{details}
		where company_id = #{company_id}
	</update>
	
	<select id="getPasswd" parameterType="String" resultType="String">
		select pwd
		from tbl_company
		where company_id = #{company_id}		
	</select>
	
	<update id="passwdUpdate" parameterType="HashMap">
		update tbl_company set pwd = #{pwd}
		where company_id = #{company_id}
	</update>
		
	<update id="profileImageUpdate" parameterType="com.spring.wanted.ProjectWanted.company.model.CompanyVO">
		update tbl_company set image = #{image}
		where company_id = #{company_id}
	</update>
		
	<select id="getCompanyImage" parameterType="String" resultType="com.spring.wanted.ProjectWanted.company.model.CompanyVO">
		select company_id, pwd, name, details, serial_no, image
		from tbl_company
		where company_id = #{company_id}		
	</select>
	
	<delete id="companyExit">
		delete from tbl_company
		where company_id = #{company_id}
	</delete>
	
	<insert id="companyDetailImageUpload" parameterType="HashMap">
		insert into tbl_detail_image(image_code, fk_company_id, image_name)
		values(seq_image_code.nextval, #{fk_company_id}, #{image_name})
	</insert>
	
	<select id="countDetailImage" parameterType="String" resultType="int">
		select count(*)
		from TBL_DETAIL_IMAGE
		where fk_company_id = #{company_id}
	</select>
	
	<delete id="deleteCompanyImage">
		delete from TBL_DETAIL_IMAGE
		where fk_company_id = #{company_id}
	</delete>
	
	<select id="getDetailImageName" parameterType="String" resultType="String">
		select image_name
		from TBL_DETAIL_IMAGE
		where fk_company_id = #{company_id}
	</select>
	
</mapper>